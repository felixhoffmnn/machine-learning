[tool.poetry]
name = "machine_learning"
version = "0.1.0"
description = "Dolore fugiat ullamco voluptate incididunt voluptate voluptate magna esse eiusmod velit deserunt cillum ut do."
authors = ["Felix Hoffmann <felix.emmanuel.hoffmann@gmail.com>"]
keywords = ["python", "template", "project"]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
]
license = "MIT"
readme = "README.md"
packages = [{ include = "machine_learning" }]

[tool.poetry.dependencies]
python = "^3.8"
loguru = "^0.6.0"
pandas = "^1.5.0"
numpy = "^1.23.3"
matplotlib = "^3.6.1"
seaborn = "^0.12.0"
python-dotenv = "^0.21.0"
poetry-dotenv-plugin = "^0.1.0"
tensorflow = { version = "^2.10.0", python = ">=3.8,<3.11" }
scikit-learn = "^1.1.3"
tensorflow-datasets = "^4.7.0"
keras = "^2.11.0"
pyyaml = "^6.0"
h5py = "^3.7.0"

[tool.poetry.group.dev.dependencies]
black = { extras = ["jupyter"], version = "^22.8.0" }
isort = "^5.10.1"
mypy = "^0.981"
types-requests = "^2.28.11.2"
pylint = "^2.15.3"
pre-commit = "^2.20.0"
jupyter = "^1.0.0"

[tool.mypy]
mypy_path = 'src'
check_untyped_defs = true
disallow_any_generics = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true

[tool.black]
line-length = 120
target-version = ["py310"]

[tool.isort]
profile = "black"

[tool.pytest]
testpaths = "tests"

[tool.pylint]
disable = "missing-module-docstring, broad-except"
max-line-length = 120

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
